# This configuration file specifies which programs should be run
# when the specified event occurs in crash dump lifetime.
#
# Example:
# EVENT=post-create   { pwd; date; }>/tmp/dt; echo $HOSTNAME `uname -r`
#
# Rule starts with a line with non-space leading character.
# All subsequent lines which start with space or tab form one rule.
# Note that separating newline is *retained*. Example:
# EVENT=post-create   date >/tmp/dt  # semicolon is not needed here!
#                     echo $HOSTNAME `uname -r`
#
# Rules may be commented out with #. One # is sufficient to comment out
# even a multi-line rule (no need to comment out every line).
#
# Rule of the form "include GLOB_PATTERN" recurses to each file which matches
# GLOB_PATTERN. Example: "include post-create.d/*.conf"
#
# Any other rules specify which programs to run on the crash dump.
#
# Each rule may have conditions to be checked before the program is run.
#
# Conditions have form VAR=VAL, where VAR is either word "EVENT"
# or a name of crash dump element to be checked (for example,
# "executable", "package", hostname" etc).
#
# If all conditions match, the remaining part of the rule
# (the "program" part) is run in the shell.
# All shell language constructs are valid.
# All stdout and stderr output is captured and passed to abrt
# and possibly to abrt's frontends and shown to the user.
#
# If the program terminates with nonzero exit code,
# the event processing is considered unsuccessful and is stopped.
# Last captured output line, if any, is considered to be
# the error message indicating the reason of the failure,
# and may be used by abrt as such.
#
# If the program terminates successfully, next rule is read
# and processed. This process is repeated until the end of this file.

# abrt-action-analyze-c needs package name, save package data
# before include directive
EVENT=post-create                       abrt-action-save-package-data

include events.d/*.conf

EVENT=post-create                       getent passwd "`cat uid`" | cut -d: -f1 >username
EVENT=post-create analyzer=Python       abrt-action-analyze-python
EVENT=post-create analyzer=Kerneloops   abrt-action-analyze-oops

# If you want all users (not just root) to be able to see oopses:
#EVENT=post-create analyzer=Kerneloops  echo 1 >inform_all_users

# If you want behavior similar to one provided by kerneloops daemon
# distributed by kerneloops.org - that is, if you want
# oopses to be reported automatically and immediately without
# user interaction, uncomment this line:
#EVENT=post-create analyzer=Kerneloops  abrt-action-kerneloops

# Example: if you want to save sosreport immediately at the moment of a crash:
#EVENT=post-create
        nice sosreport --tmp-dir "$DUMP_DIR" --batch \
                --only=anaconda --only=bootloader --only=devicemapper \
                --only=filesys --only=hardware --only=kernel --only=libraries \
                --only=memory --only=networking --only=nfsserver --only=pam \
                --only=process --only=rpm -k rpm.rpmva=off --only=ssh \
                --only=startup --only=yum --only=general --only=x11 \
        && {
                rm sosreport*.md5
                mv sosreport*.tar.bz2 sosreport.tar.bz2
                mv sosreport*.tar.xz sosreport.tar.xz
                true
        } 2>/dev/null


EVENT=report_kerneloops.org analyzer=Kerneloops abrt-action-kerneloops
EVENT=report_Bugzilla analyzer=Python           abrt-action-bugzilla -c /etc/abrt/plugins/Bugzilla.conf
EVENT=report_Logger                             abrt-action-print -o "${Log_File:-/tmp/abrt.log}" -a "${Append:-no}"
