#!/usr/bin/env python
# Single purpose HTTP server
# - serves files specified as arguments in order of appearance

import os
import sys
import json
import ssl
import cgi
import BaseHTTPServer

class Handler(BaseHTTPServer.BaseHTTPRequestHandler):
    def do_POST(self):
        form = cgi.FieldStorage(
            fp=self.rfile,
            headers=self.headers,
            environ={
                'REQUEST_METHOD': 'POST',
                'CONTENT_TYPE': self.headers['Content-Type'],
            }
        )

        self.send_response(202)
        self.send_header('Content-Type', 'application/json')
        self.send_header('Connection', 'close')
        self.end_headers()

        if self.path != '/faf/reports/new/':
            print 'Invalid request path'
            return

        json_str = form['file'].file.read()
        try:
            #just check that it's a JSON
            json.loads(json_str)
        except ValueError:
            print 'Received invalid JSON data:\n{0}'.format(json_str)
            return

        response = {
            'bthash': '691cf824e3e07457156125636e86c50279e29496',
            'message': 'https://retrace.fedoraproject.org/faf/reports/6437/\nhttps://bugzilla.redhat.com/show_bug.cgi?id=851210',
            'reported_to': [
                {
                    'type': 'url',
                    'value': 'https://retrace.fedoraproject.org/faf/reports/6437/',
                    'reporter': 'ABRT Server'
                },
                {
                    'type': 'url',
                    'value': 'https://bugzilla.redhat.com/show_bug.cgi?id=851210',
                    'reporter': 'Bugzilla'
                }
            ],
            'result': True
        }
        json.dump(response, self.wfile, indent=2)
        #write result to stdout
        self.auth_status()

    # Useful for debugging this script with a browser.
    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-type", "text/plain")
        self.end_headers()

        self.auth_status(self.wfile)

    def auth_status(self, fh=sys.stdout):
        cert = self.request.getpeercert()
        if not cert:
            fh.write('NOAUTH\n')
        else:
            # "which is a fairly poorly-formed subject field"
            for item in cert['subject']:
                (k, v) = item[0]
                if k == 'commonName':
                    fh.write('AUTH {0}\n'.format(v))
                    break
            else:
                fh.write('AUTHERROR: no commonName\n')


try:
    reqs = { 'none': ssl.CERT_NONE,
             'optional': ssl.CERT_OPTIONAL,
             'required': ssl.CERT_REQUIRED }[sys.argv[1]]
except (KeyError, IndexError):
    sys.exit('Usage: {0} <none|optional|required>'.format(sys.argv[0]))

ca_certs = None if reqs == ssl.CERT_NONE else 'ca_cert.pem'

PORT = 12345
print "Serving at port", PORT

httpd = BaseHTTPServer.HTTPServer(("", PORT), Handler)
httpd.socket = ssl.wrap_socket(httpd.socket,
        server_side=True,
        certfile='server_cert.pem',
        keyfile='server_key.pem',
        ca_certs=ca_certs,
        cert_reqs=reqs)
httpd.serve_forever()
