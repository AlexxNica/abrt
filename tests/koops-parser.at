# -*- Autotest -*-

AT_BANNER([kernel oops parser])

AT_TESTFUN([koops_extract_version],
[[
#include "libabrt.h"
#include "koops-test.h"

int run_test(const struct test_struct *test)
{
	FILE *fp = xfopen_ro(test->filename);
	fprintf(stderr, "%s\t", test->filename);
	char *line;
	while ((line = xmalloc_fgetline(fp)) != NULL)
	{
		char *version = koops_extract_version(line);
		if (version && !strcmp(version, test->expected_results))
		{
			log("version %s", version);
			free(version);
			return 0;
		}

		free(line);
	}
	log("version was not found");
	fclose(fp);
	return 1;
}

int main(void)
{
	/* tests run in abrt/tests/testsuite.dir/X, where X is test number */
	struct test_struct test[] = {
		{ EXAMPLE_PFX"/cut_here.right", "2.6.32-19.el6.x86_64" },
		{ EXAMPLE_PFX"/oops-kernel-3.x.x", "3.0.0-3.fc16.i686.PAE" },
		{ EXAMPLE_PFX"/koops-tainted-gw", "3.1.0-0.rc9.git0.0.fc16.x86_64"},
	};

	int ret = 0;
	for (int i = 0 ; i < ARRAY_SIZE(test); ++i)
		ret |= run_test(&test[i]);

	return ret;
}
]])

AT_TESTFUN([koops_tainted_short],
[[
#include "libabrt.h"
#include "koops-test.h"

enum {
	TEST_TAINTED,
	TEST_NOT_TAINTED
};

int run_test(const struct test_struct *test, int flags)
{
	char *koops_bt = fread_full(test->filename);

	char *tnt = kernel_tainted_short(koops_bt);
	free(koops_bt);
	int ret = 0;
	switch (flags) {
	case TEST_NOT_TAINTED:
		if (tnt)
		{
			log("%s '%s'", test->filename, tnt);
			ret = 1;
		}
		break;
	case TEST_TAINTED:
		if (!tnt)
		{
			log("%s", test->filename);
			ret = 1;
		}
	};

	free(tnt);
	return ret;
}

int main(void)
{
	/* tests run in abrt/tests/testsuite.dir/X, where X is test number */
	struct test_struct not_tainted[] = {
		{ EXAMPLE_PFX"/oops1.right", NULL},
	};

	struct test_struct tainted[] = {
		{ EXAMPLE_PFX"/koops-tainted-bg1", "G    B      " },
		{ EXAMPLE_PFX"/oops-same-as-oops4.right", "P           " },
		{ EXAMPLE_PFX"/koops-tainted-gw", NULL },
	};

	log("test not tainted");
	int ret = 0;
	for (int i = 0; i < ARRAY_SIZE(not_tainted); ++i)
		ret |= run_test(&not_tainted[i], TEST_NOT_TAINTED);

	log("test tainted");
	for (int i = 0; i < ARRAY_SIZE(tainted); ++i)
		ret |= run_test(&tainted[i], TEST_TAINTED);

	return ret;
}
]])
